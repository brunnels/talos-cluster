---
# yaml-language-server: $schema=https://raw.githubusercontent.com/yannh/kubernetes-json-schema/master/v1.32.1-standalone-strict/job-batch-v1.json
apiVersion: batch/v1
kind: Job
metadata:
  name: ${NAMESPACE}-pgo-${DB_NAME:-${APP}}-init
spec:
  ttlSecondsAfterFinished: 300
  template:
    spec:
      initContainers:
        - name: patch-pgo-users
          image: bitnami/kubectl:latest
          command:
            - /bin/sh
            - -c
          args:
            - |
              kubectl patch postgresclusters.postgres-operator.crunchydata.com downloads \
                --namespace downloads \
                --type='json' \
                -p '[{"op": "add", "path": "/spec/users/-", "value": {"name": "prowlarr", "databases": ["prowlarr"]}}]'
      containers:
        - name: psql
          image: postgres:17
          env:
            - name: DB_URI
              valueFrom:
                secretKeyRef:
                  name: "${NAMESPACE}-pguser-postgres"
                  key: uri
            - name: DB_NAMES # space-separated list of DB names
              value: "${DB_NAMES:-${APP}}"
          command:
            - /bin/sh
            - -c
          args:
            - |
              for DB in $DB_NAMES; do
                echo "Waiting for database $DB to exist..."
                ATTEMPTS=0
                until psql "$${DB_URI%/postgres}/$DB" -tAc "SELECT 1 FROM pg_database WHERE datname='$DB'" | grep -q 1; do
                  ATTEMPTS=$((ATTEMPTS+1))
                  if [ "$ATTEMPTS" -ge 6 ]; then
                    echo "Database $DB does not exist after waiting 60s. Exiting."
                    exit 1
                  fi
                  sleep 5
                done
                echo "Database $DB exists. Setting grant on public schema for user ${DB_USER:-${APP}}."
                psql "$${DB_URI%/postgres}/$DB" -c "GRANT ALL ON SCHEMA public TO \"${DB_USER:-${APP}}\";"
              done
      restartPolicy: OnFailure
      activeDeadlineSeconds: 20
