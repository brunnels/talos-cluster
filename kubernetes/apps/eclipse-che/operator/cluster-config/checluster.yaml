---
apiVersion: org.eclipse.che/v2
kind: CheCluster
metadata:
  name: &name eclipse-che
spec:
  components:
    cheServer:
      extraProperties:
        CHE_OIDC_USERNAME__CLAIM: preferred_username
    devfileRegistry:
      disableInternalRegistry: true
      externalDevfileRegistries:
        - url: "https://registry.devfile.io"
    pluginRegistry:
      disableInternalRegistry: true
  networking:
    annotations:
      external-dns.alpha.kubernetes.io/target: "internal.${SECRET_DOMAIN}"
      gethomepage.dev/enabled: "true"
      gethomepage.dev/group: Development
      gethomepage.dev/name: Eclipse Che
      gethomepage.dev/icon: flux-cd
      gethomepage.dev/description: Flux Dashboard
      gethomepage.dev/url: &domain "che.${SECRET_DOMAIN}"
      kubernetes.io/ingress.class: internal
      nginx.ingress.kubernetes.io/proxy-buffer-size: 16k
      nginx.ingress.kubernetes.io/proxy-connect-timeout: "3600"
      nginx.ingress.kubernetes.io/proxy-read-timeout: "3600"
      nginx.ingress.kubernetes.io/rewrite-target: /
      nginx.ingress.kubernetes.io/secure-backends: "true"
      nginx.ingress.kubernetes.io/ssl-redirect: "true"
      nginx.org/websocket-services: che-gateway
      nginx.ingress.kubernetes.io/server-snippets: |
        location / {
            proxysetheader Upgrade $httpupgrade;
            proxyhttpversion 1.1;
            proxysetheader X-Forwarded-Host $httphost;
            proxysetheader X-Forwarded-Proto $scheme;
            proxysetheader X-Forwarded-For $remoteaddr;
            proxysetheader Host $host;
            proxysetheader Connection "upgrade";
            proxycachebypass $httpupgrade;
        }
    auth:
      #advancedAuthorization:
      #  allowGroups:
      #    - "oidc:Administrators"
      #    - "oidc:Domain Users"
      #  allowUsers:
      #    - "oidc:brunnels"
      gateway:
        deployment:
          containers:
            - name: oauth-proxy
              env:
                - name: OAUTH2_PROXY_COOKIE_CSRF_PER_REQUEST
                  value: "true"
                - name: OAUTH2_PROXY_PASS_AUTHORIZATION_HEADER
                  value: "true"
                - name: OAUTH2_PROXY_WHITELIST_DOMAINS
                  value: "[https://auth.${SECRET_DOMAIN}]"
                - name: OAUTH2_PROXY_COOKIE_REFRESH
                  value: "1h"
      identityProviderURL: https://auth.${SECRET_DOMAIN}
      oAuthClientName: kubeapi
      oAuthSecret: "${SECRET_KUBEAPI_OIDC_CLIENT_SECRET}"
    domain: *domain
    ingressClassName: internal
