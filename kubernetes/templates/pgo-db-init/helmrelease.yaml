---
# yaml-language-server: $schema=https://raw.githubusercontent.com/bjw-s-labs/helm-charts/main/charts/other/app-template/schemas/helmrelease-helm-v2.schema.json
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: ${NAMESPACE}-pgo-${DB_USER}-init
spec:
  interval: 1h
  chartRef:
    kind: OCIRepository
    name: app-template
  install:
    remediation:
      retries: -1
  upgrade:
    cleanupOnFail: true
    remediation:
      retries: 3
  values:
    controllers:
      db-init:
        type: job
        serviceAccount:
          name: ${NAMESPACE}-pgo-db-init
#        job:
#          ttlSecondsAfterFinished: 300
#          activeDeadlineSeconds: 120
        initContainers:
          patch-postgres-cluster:
            image:
              repository: docker.io/bitnami/kubectl
              tag: 1.33.4@sha256:ed0b31a0508da84ee655c5c6e01bd3897fc56ad6cf69debb27fa1893a06d2246
              pullPolicy: IfNotPresent
            env:
              DB_NAMES: "${DB_NAMES}"
            restartPolicy: Always
            command:
              - /bin/bash
              - -c
            args:
              - |
                set -euo pipefail

                wait_for_cluster() {
                  local timeout=55
                  local interval=2
                  local waited=0
                  while true; do
                    CLUSTER_JSON=$(kubectl get postgresclusters.postgres-operator.crunchydata.com ${NAMESPACE} --namespace ${NAMESPACE} -o json)
                    NOT_READY=$(echo "$CLUSTER_JSON" | jq '[.status.instances[] | select(.name=="pgo-cluster") | select(.readyReplicas!=.replicas)] | length')
                    if [ "$NOT_READY" -eq 0 ]; then
                      echo "All PostgresCluster replicas are ready."
                      break
                    fi
                    waited=$((waited+interval))
                    if [ "$waited" -ge "$timeout" ]; then
                      echo "Timed out waiting for all PostgresCluster replicas to be ready." >&2
                      exit 1
                    fi
                    echo "Waiting for PostgresCluster replicas to be ready... ($waited/$timeout s)"
                    sleep $interval
                  done
                  sleep 30s
                }

                wait_for_secret() {
                  local secret_name="${NAMESPACE}-pguser-${DB_USER}"
                  local timeout=55
                  local interval=2
                  local waited=0

                  echo "Waiting for secret $secret_name to be created..."
                  while true; do
                    SECRET_EXISTS=$(kubectl get secret "$secret_name" --namespace "${NAMESPACE}" \
                      -o jsonpath='{.metadata.name}' 2>/dev/null || echo "")
                    if [ "$SECRET_EXISTS" == "$secret_name" ]; then
                      echo "Secret $secret_name found."
                      break
                    fi
                    waited=$((waited+interval))
                    if [ "$waited" -ge "$timeout" ]; then
                      echo "Timed out waiting for secret $secret_name to be created." >&2
                      exit 1
                    fi
                    sleep $interval
                  done

                  waited=0
                  echo "Waiting for pushsecrets.external-secrets.io/$secret_name to exist..."
                  while true; do
                    PUSHSECRET_EXISTS=$(kubectl get pushsecrets.external-secrets.io "$secret_name" --namespace "${NAMESPACE}" \
                      -o jsonpath='{.metadata.name}' 2>/dev/null || echo "")
                    if [ "$PUSHSECRET_EXISTS" == "$secret_name" ]; then
                      echo "pushsecrets.external-secrets.io/$secret_name found."
                      break
                    fi
                    waited=$((waited+interval))
                    if [ "$waited" -ge "$timeout" ]; then
                      echo "Timed out waiting for pushsecrets.external-secrets.io/$secret_name to exist." >&2
                      exit 1
                    fi
                    sleep $interval
                  done

                  waited=0
                  echo "Waiting for all status.conditions to be Ready on pushsecrets.external-secrets.io/$secret_name..."
                  while true; do
                    NOTREADY=$(kubectl get pushsecrets.external-secrets.io "$secret_name" --namespace "${NAMESPACE}" -o json \
                      | jq '[.status.conditions[] | select(.type=="Ready") | select(.status!="True")] | length')

                    if [ "$NOTREADY" -eq 0 ]; then
                      echo "All status.conditions are Ready on pushsecrets.external-secrets.io/$secret_name."
                      break
                    fi
                    waited=$((waited+interval))
                    if [ "$waited" -ge "$timeout" ]; then
                      echo "Timed out waiting for all status.conditions to be Ready on pushsecrets.external-secrets.io/$secret_name." >&2
                      exit 1
                    fi
                    sleep $interval
                  done
                }

                USER_NAME="${DB_USER}"
                DB_NAMES_ARRAY=($DB_NAMES)

                # Get current users and databases for USER_NAME
                USERS_JSON=$(kubectl get postgresclusters.postgres-operator.crunchydata.com ${NAMESPACE} \
                  --namespace ${NAMESPACE} -o json)
                printf "Current PostgresCluster users:\n%s\n" "$(echo "$USERS_JSON" | jq '.spec.users[].name')"
                USER_INDEX=$(echo "$USERS_JSON" | jq -r ".spec.users | map(.name == \"$USER_NAME\") | index(true)")
                [ "$USER_INDEX" != "null" ] && echo "User $USER_NAME index: $USER_INDEX" || echo "User $USER_NAME is not defined"

                # Convert DB_NAMES to sorted JSON array
                DB_ARRAY=$(printf '%s\n' "$${DB_NAMES_ARRAY[@]}" | jq -R . | jq -s 'sort')

                if [ -z "$DB_NAMES" ]; then
                  # If DB_NAMES is empty and user exists, remove user
                  if [ "$USER_INDEX" != "null" ]; then
                    echo "DB_NAMES is empty, removing user $USER_NAME." 2>&1
                    kubectl patch postgresclusters.postgres-operator.crunchydata.com ${NAMESPACE} \
                      --namespace ${NAMESPACE} --type='json' \
                      -p "[{\"op\": \"remove\", \"path\": \"/spec/users/$USER_INDEX\"}]"
                  fi
                  echo "DB_NAMES is empty, configuration error!" 2>&1
                  exit 1
                fi

                if [ "$USER_INDEX" = "null" ]; then
                  echo "User $USER_NAME is not defined, adding user with databases: $DB_NAMES to the PostgresCluster."
                  kubectl patch postgresclusters.postgres-operator.crunchydata.com ${NAMESPACE} \
                    --namespace ${NAMESPACE} --type='json' \
                    -p "[{\"op\": \"add\", \"path\": \"/spec/users/-\", \"value\": {\"name\": \"$USER_NAME\", \"databases\": $DB_ARRAY, \"password\": {\"type\":\"AlphaNumeric\"}}}]"
                  wait_for_secret
                  exit 0
                fi

                CURRENT_DB_ARRAY=$(echo "$USERS_JSON" | jq ".spec.users[$USER_INDEX].databases | sort")
                if [ "$CURRENT_DB_ARRAY" = "$DB_ARRAY" ]; then
                  echo "User $USER_NAME already exists with correct databases, skipping patch."
                  wait_for_secret
                  exit 0
                fi

                echo "Updating databases for user $USER_NAME to $DB_NAMES."
                kubectl patch postgresclusters.postgres-operator.crunchydata.com ${NAMESPACE} \
                  --namespace ${NAMESPACE} --type='json' \
                  -p "[{\"op\": \"replace\", \"path\": \"/spec/users/$USER_INDEX/databases\", \"value\": $DB_ARRAY}]"
                wait_for_secret
                exit 0
            securityContext:
              allowPrivilegeEscalation: false
              readOnlyRootFilesystem: true
              capabilities: { drop: ["ALL"] }
            resources:
              requests:
                cpu: 10m
                memory: 52Mi
              limits:
                memory: 128Mi
        containers:
          add-public-schema-grants:
            image:
              repository: ghcr.io/home-operations/postgres-init
              tag: 17.6.0@sha256:86a1992d46273c58fd4ad95b626081dfaabfe16bd56944675169e406d1a660dd
              pullPolicy: IfNotPresent
            env:
              DB_NAMES: "${DB_NAMES}"
              DB_URI:
                valueFrom:
                  secretKeyRef:
                    name: "${NAMESPACE}-pguser-postgres"
                    key: uri
              DB_PW:
                valueFrom:
                  secretKeyRef:
                    name: "${NAMESPACE}-pguser-${DB_USER}"
                    key: "${DB_PW_KEY:-password}"
            command:
              - /bin/bash
              - -c
            args:
              - |
                for DB in $DB_NAMES; do
                  echo "Waiting for database $DB to exist..."
                  ATTEMPTS=0
                  until psql "$${DB_URI%/postgres}/$DB" -tAc "SELECT 1 FROM pg_database WHERE datname='$DB'" | grep -q 1; do
                    ATTEMPTS=$((ATTEMPTS+1))
                    if [ "$ATTEMPTS" -ge 15 ]; then
                      echo "Database $DB does not exist after waiting 60s. Exiting."
                      exit 1
                    fi
                    sleep 2
                  done
                  echo "Database $DB exists. Setting grant on public schema for user ${DB_USER}."
                  psql "$${DB_URI%/postgres}/$DB" -c "GRANT ALL ON SCHEMA public TO \"${DB_USER}\";"
                  psql "$${DB_URI%/postgres}/$DB" -c "ALTER USER \"${DB_USER}\" WITH PASSWORD '${DB_PW}';"
                done
            securityContext:
              allowPrivilegeEscalation: false
              readOnlyRootFilesystem: true
              capabilities: { drop: ["ALL"] }
            resources:
              requests:
                cpu: 10m
                memory: 52Mi
              limits:
                memory: 128Mi
    defaultPodOptions:
      securityContext:
        runAsNonRoot: true
        runAsUser: 65534
        runAsGroup: 65534
