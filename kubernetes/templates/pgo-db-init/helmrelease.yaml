---
# yaml-language-server: $schema=https://raw.githubusercontent.com/bjw-s-labs/helm-charts/main/charts/other/app-template/schemas/helmrelease-helm-v2.schema.json
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: ${NAMESPACE}-pgo-${DB_USER}-init
spec:
  interval: 1h
  chartRef:
    kind: OCIRepository
    name: app-template
  install:
    remediation:
      retries: -1
  upgrade:
    cleanupOnFail: true
    remediation:
      retries: 3
  values:
    controllers:
      db-init:
        type: job
        serviceAccount:
          name: ${NAMESPACE}-pgo-db-init
        job:
          ttlSecondsAfterFinished: 300
          activeDeadlineSeconds: 60
        initContainers:
          patch-postgres-cluster:
            image:
              repository: docker.io/bitnami/kubectl
              tag: 1.33.4@sha256:ed0b31a0508da84ee655c5c6e01bd3897fc56ad6cf69debb27fa1893a06d2246
              pullPolicy: IfNotPresent
            env:
              DB_NAMES: "${DB_NAMES}"
            command:
              - /bin/bash
              - -c
            args:
              - |
                set -euo pipefail

                USER_NAME="${DB_USER}"
                DB_NAMES_ARRAY=($DB_NAMES)

                # Get current users and databases for USER_NAME
                USERS_JSON=$(kubectl get postgresclusters.postgres-operator.crunchydata.com ${NAMESPACE} \
                  --namespace ${NAMESPACE} -o json)
                USER_INDEX=$(echo "$USERS_JSON" | jq -r ".spec.users | map(.name == \"$USER_NAME\") | index(true)")

                # Convert DB_NAMES to sorted JSON array
                DB_ARRAY=$(printf '%s\n' "$${DB_NAMES_ARRAY[@]}" | jq -R . | jq -s 'sort')

                if [ -z "$DB_NAMES" ]; then
                  # If DB_NAMES is empty and user exists, remove user
                  if [ "$USER_INDEX" != "null" ]; then
                    echo "DB_NAMES is empty, removing user $USER_NAME."
                    kubectl patch postgresclusters.postgres-operator.crunchydata.com ${NAMESPACE} \
                      --namespace ${NAMESPACE} --type='json' \
                      -p "[{\"op\": \"remove\", \"path\": \"/spec/users/$USER_INDEX\"}]"
                  else
                    echo "DB_NAMES is empty and user $USER_NAME does not exist, nothing to do."
                  fi
                  sleep 10 # wait for PGO to process the user change
                  exit 0
                fi

                if [ "$USER_INDEX" = "null" ]; then
                  # User does not exist, add user
                  echo "User $USER_NAME does not exist, adding with databases: $DB_ARRAY."
                  kubectl patch postgresclusters.postgres-operator.crunchydata.com ${NAMESPACE} \
                    --namespace ${NAMESPACE} --type='json' \
                    -p "[{\"op\": \"add\", \"path\": \"/spec/users/-\", \"value\": {\"name\": \"$USER_NAME\", \"databases\": $DB_ARRAY}}]"
                  sleep 10 # wait for PGO to process the user change
                  exit 0
                fi

                # User exists, get current databases and compare
                CURRENT_DB_ARRAY=$(echo "$USERS_JSON" | jq ".spec.users[$USER_INDEX].databases | sort")
                if [ "$CURRENT_DB_ARRAY" = "$DB_ARRAY" ]; then
                  echo "User $USER_NAME already exists with correct databases, skipping patch."
                  exit 0
                fi

                # Update databases array for user
                echo "Updating databases for user $USER_NAME to $DB_ARRAY."
                kubectl patch postgresclusters.postgres-operator.crunchydata.com ${NAMESPACE} \
                  --namespace ${NAMESPACE} --type='json' \
                  -p "[{\"op\": \"replace\", \"path\": \"/spec/users/$USER_INDEX/databases\", \"value\": $DB_ARRAY}]"

                sleep 10 # wait for PGO to process the user change
            securityContext:
              allowPrivilegeEscalation: false
              readOnlyRootFilesystem: true
              capabilities: { drop: ["ALL"] }
            resources:
              requests:
                cpu: 10m
                memory: 52Mi
              limits:
                memory: 128Mi
        containers:
          add-public-schema-grants:
            image:
              repository: ghcr.io/home-operations/postgres-init
              tag: 17.6.0@sha256:86a1992d46273c58fd4ad95b626081dfaabfe16bd56944675169e406d1a660dd
              pullPolicy: IfNotPresent
            env:
              DB_NAMES: "${DB_NAMES}"
              DB_URI:
                valueFrom:
                  secretKeyRef:
                    name: "${NAMESPACE}-pguser-postgres"
                    key: uri
            command:
              - /bin/bash
              - -c
            args:
              - |
                for DB in $DB_NAMES; do
                  echo "Waiting for database $DB to exist..."
                  ATTEMPTS=0
                  until psql "$${DB_URI%/postgres}/$DB" -tAc "SELECT 1 FROM pg_database WHERE datname='$DB'" | grep -q 1; do
                    ATTEMPTS=$((ATTEMPTS+1))
                    if [ "$ATTEMPTS" -ge 15 ]; then
                      echo "Database $DB does not exist after waiting 60s. Exiting."
                      exit 1
                    fi
                    sleep 2
                  done
                  echo "Database $DB exists. Setting grant on public schema for user ${DB_USER}."
                  psql "$${DB_URI%/postgres}/$DB" -c "GRANT ALL ON SCHEMA public TO \"${DB_USER}\";"
                done
                sleep 10 # wait for PGO to process the user changes
            securityContext:
              allowPrivilegeEscalation: false
              readOnlyRootFilesystem: true
              capabilities: { drop: ["ALL"] }
            resources:
              requests:
                cpu: 10m
                memory: 52Mi
              limits:
                memory: 128Mi
    defaultPodOptions:
      securityContext:
        runAsNonRoot: true
        runAsUser: 65534
        runAsGroup: 65534
